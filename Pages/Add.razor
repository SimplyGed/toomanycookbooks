@page "/add"
@using Services.Models

@inject NavigationManager NavigationManager
@inject RecipeService RecipeService
@inject BookService BookService

<h1>Add New</h1>

<EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="name" class="col-sm-1 col-form-label">Name</label>
        <InputText id="name" @bind-Value="recipe.Name" class="form-control col-sm-6" />
    </div>

    <div class="form-group row">
        <label for="book" class="col-sm-1 col-form-label">Book</label>
        <InputSelect id="book" @bind-Value="recipe.BookId">
                <option value="">Select a book...</option>
            @foreach (var b in books.OrderBy(b => b.Title))
            {
                <option value="@b.Id">@b.Title</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <div>
            <button id="add-ingredient" type="button" class="btn btn-success" @onclick="AddIngredient">Add</button>
        </div>

        <table id="ingredients" class="table table-compact">
            <thead>
                <tr>
                    <th>Ingredients</th>
                </tr>
            </thead>
            <tbody>
                @if (!recipe.Ingredients.Any())
                {
                    <tr>
                        <td>There are no ingredients for this recipe.</td>
                    </tr>
                }
                else
                {
                    @foreach (var (item, index) in recipe.Ingredients.Select((r, i) => (r,i)))
                    {
                        <tr>
                            <td>
                                <InputText id="@($"ingredient{index}")" @bind-Value="item.Name" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <button id="save" class="btn btn-success" type="submit" disabled="@formInvalid">Save</button>
</EditForm>

@code
{
    private IEnumerable<Book> books = Enumerable.Empty<Book>();

    private Recipe recipe = new();

    private EditContext? editContext;
    private bool formInvalid = true;

    protected override async Task OnInitializedAsync()
    {
        editContext = new(recipe);
        editContext.OnFieldChanged += HandleFieldChanged;
        
        books = await BookService.GetBooksAsync();

        await base.OnInitializedAsync();
    }
    
    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (editContext is not null)
        {
            formInvalid = !editContext.Validate();
            StateHasChanged();
        }
    }

    public void AddIngredient()
    {
        ((Recipe)editContext!.Model).Ingredients.Add(new());
    }

    private async Task HandleValidSubmit()
    {
        if (await RecipeService.SaveAsync(recipe))
        {
            NavigationManager.NavigateTo("/");
        }
    }
}